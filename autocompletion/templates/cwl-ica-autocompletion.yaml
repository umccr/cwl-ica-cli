---
name: cwl-ica

subcommands:
  help:
    summary: |
      Print help and exit

  version:
    summary: |
      Print version and exit


  ######################
  # Configuration Commands
  ######################
  configure-repo:
    summary: |
      One-time command to point to the cwl-ica git repository
    options:
      - name: repo-path
        type: dir
        summary: |
          path to local cwl-ica repository
  configure-tenant:
    summary: |
      Create mapping of tenancy ids to tenancy names, convenience to save time typing out tenancy names.
      Each project is linked to a tenancy id
    options:
      - name: tenant-id
        type: string
        summary: |
          The id of the tenant
      - name: tenant-name
        type: string
        summary: |
          The name of the tenant
      - name: set-as-default
        summary: |
          Set as default tenant
  configure-user:
    summary: |
      Add a user to user.yaml
    options:
      - name: username
        type: string
        summary: |
          The name of the user
      - name: email
        type: string
        summary: |
          The users email address
      - name: identifier
        type: string
        summary: |
          The orcid ID of the user
      - name: set-as-default
        summary: |
          Set as default user


  ##########################
  # ICA Initialisers
  ##########################
  project-init:
    summary: |
      Initialise a project in ${CWL_ICA_REPO_PATH}/config/project.yaml
    options:
      - name: project-id
        summary: |
          The ICA project id
        type: string
      - name: project-name
        type: string
        summary: |
          The name of the project
      - name: project-api-key-name
        type: string
        summary: |
          Required, this is NOT an api-key, but merely an api-key with a workgroup
          context that can create an access-token for this project
      - name: project-description
        type: string
        summary: |
          Required, a short summary of the project
      - name: project-abbr
        type: string
        summary: |
          Required, a quick abbreviation of the project name - used to append
          to workflow names
      - name: production
        summary: |
          Optional, boolean, if set, the project is a production project
      - name: tenant-name
        type: string
        summary: |
          Optional, the tenant name
        completion:
          # This prints out all of the tenants from tenant.yaml
          command_string: |-
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
      - name: set-as-default
        summary: |
          Optional, set as the default project

  category-init:
    summary: |
      Initialise a category in ${CWL_ICA_REPO_PATH}/config/category.yaml
    options:
      - name: category-name
        summary: |
          Name of category
        type: string
      - name: category-description
        summary: |
          Category description
        type: string


  ########################
  # Set Defaults Commands
  ########################
  set-default-tenant:
    summary: |
      Set a tenant to the default tenant
    options:
      - name: tenant-name
        summary: |
          Name of tenant
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
  set-default-project:
    summary: |
      Set a project to the default project
    options:
      - name: project-name
        summary: |
          Name of project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
  set-default-user:
    summary: |
      Set a user to the default user
    options:
      - name: username
        summary: |
          Name of user
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF

  #########################
  # List Commands
  #########################
  list-categories:
    summary: |
      List registered categories
  list-projects:
    summary: |
      List registered projects
    options:
      - name: tenant-name
        summary: |
          Name of tenant
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
  list-tenants:
    summary: |
      List registered tenants
  list-users:
    summary: |
      List registered users


  #######################
  # Creation Commands
  #######################
  create-expression-from-template:
    summary: |
      Initialise an CWL expression from the cwl expression template
    options:
      - name: expression-name
        summary: |
          The name of the expression
        type: string
      - name: expression-version
        summary: |
          Version of the expression
        type: string
      - name: username
        summary: |
          CWL Creator
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF
  create-schema-from-template:
    summary: |
      Initialise a CWL schema from the cwl schema template
    options:
      - name: schema-name
        summary: |
          The name of the schema
        type: string
      - name: schema-version
        summary: |
          Version of the schema
        type: string
  create-tool-from-template:
    summary: |
      Initialise a CWL tool from the cwl tool template
    options:
      - name: tool-name
        summary: |
          The name of the tool
        type: string
      - name: tool-version
        summary: |
          Version of the tool
        type: string
      - name: username
        summary: |
          CWL Creator
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF
  create-workflow-from-template:
    summary: |
      Initialise a CWL workflow from the cwl workflow template
    options:
      - name: workflow-name
        summary: |
          The name of the workflow
        type: string
      - name: workflow-version
        summary: |
          Version of the workflow
        type: string
      - name: username
        summary: |
          CWL Creator
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF


  ###################
  # Validation Commands
  ###################
  expression-validate:
    summary: |
      Validate a CWL expression
    options:
      - name: expression-path
        summary: |
          Path to the expression
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_expression_paths.py
            EOF
  schema-validate:
    summary: |
      Validate a CWL schema
    options:
      - name: schema-path
        summary: |
          Path to the schema
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_schema_paths.py
            EOF
  tool-validate:
    summary: |
      Validate a CWL tool ready for initialising on ICA
    options:
      - name: tool-path
        summary: |
          Path to the tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_tool_paths.py
            EOF
  workflow-validate:
    summary: |
      Validate a CWL workflow ready for initialising on ICA
    options:
      - name: workflow-path
        summary: |
          Path to the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_workflow_paths.py
            EOF
  validate-config-yamls:
    summary: |
      Confirm all config yamls are legitimate
  validate-api-key-script:
    summary: |
      Confirm your api-key script works for a given project
    options:
      - name: project-name
        summary: |
          Name of your project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF

  ###############
  # Init Commands
  ###############
  expression-init:
    summary: |
      Register an expression in ${CWL_ICA_REPO_PATH}/config/expression.yaml
    options:
      - name: expression-path
        summary: |
          Path to the expression
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_unregistered_expression_paths.py
            EOF
  schema-init:
    summary: |
      Register a schema in ${CWL_ICA_REPO_PATH}/config/schema.yaml
    options:
      - name: schema-path
        summary: |
          Path to the schema
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_unregistered_schema_paths.py
            EOF
  tool-init:
    summary: |
      Register a tool in ${CWL_ICA_REPO_PATH}/config/tool.yaml and with ICA projects
    options:
      - name: tool-path
        summary: |
          Path to the tool
        type: string
        completion:
          command_string: |-
            python - <<EOF
            __cwl-ica_list_unregistered_tool_paths.py
            EOF
      - name: projects
        summary: |
          List of projects to add the tool to
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: tenants
        summary: |
          List of tenants to filter by when project set to 'all'
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
      - name: categories
        summary: |
          List of categories to add to tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_category_names.py
            EOF
  workflow-init:
    summary: |
      Register a workflow in ${CWL_ICA_REPO_PATH}/config/workflow.yaml and with ICA projects
    options:
      - name: workflow-path
        summary: |
          Path to the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_unregistered_workflow_paths.py
            EOF
      - name: projects
        summary: |
          List of projects to add the tool to
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: tenants
        summary: |
          List of tenants to filter by when project set to 'all'
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
      - name: categories
        summary: |
          List of categories to add to tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_category_names.py
            EOF

  ########################
  # Sync-to-project Commands
  ########################
  expression-sync:
    summary: |
      Sync an expression in ${CWL_ICA_REPO_PATH}/config/expression.yaml
    options:
      - name: expression-path
        summary: |
          Path to the expression
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_expression_paths.py
            EOF
  tool-sync:
    summary: |
      Sync a tool md5sum in ${CWL_ICA_REPO_PATH}/config/tool.yaml
      and update definition on ICA
    options:
      - name: tool-path
        summary: |
          Path to the tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_tool_paths.py
            EOF
      - name: projects
        summary: |
          List of projects to sync the tool to
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: tenants
        summary: |
          List of tenants to filter by when project set to 'all'
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
  schema-sync:
    summary: |
      Sync a schema in ${CWL_ICA_REPO_PATH}/config/schema.yaml
    options:
      - name: schema-path
        summary: |
          Path to the schema
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_schema_paths.py
            EOF
      - name: force
        summary: |
          Overwrite on ICA even if mod time in yaml is behind
  workflow-sync:
    summary: |
      Sync a workflows md5sum in ${CWL_ICA_REPO_PATH}/config/workflow.yaml
      and update definition on ICA
    options:
      - name: workflow-path
        summary: |
          Path to the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_workflow_paths.py
            EOF
      - name: projects
        summary: |
          List of projects to sync the workflow to
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: tenants
        summary: |
          List of tenants to filter by when project set to 'all'
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tenant_names.py
            EOF
      - name: force
        summary: |
          Overwrite on ICA even if mod time in yaml is behind

  #######################
  # Add-to-project Commands
  #######################
  add-tool-to-project:
    summary: |
      Add an existing tool to another project
    options:
      - name: tool-path
        summary: |
          Path to the tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_tool_paths.py
            EOF
      - name: project
        summary: |
          Name of the project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
  add-workflow-to-project:
    summary: |
      Add an existing workflow to another project
    options:
      - name: workflow-path
        summary: |
          Path to the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_workflow_paths.py
            EOF
      - name: project
        summary: |
          Name of the project to add the workflow to
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
  add-linked-project:
    summary: |
      Add a linked project to another project
    options:
      - name: src-project
        summary: |
          The name of your project in project.yaml
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: target-project
        summary: |
          ID of the target project to receive all ica workflows and ica workflow versions
        type: string

  ########################
  # Add-category Commands
  ########################
  add-category-to-tool:
    summary: |
      Add an existing category to an existing tool
    options:
      - name: tool-name
        summary: |
          Name of the tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_tool_names.py
            EOF

      - name: category-name
        summary: |
          The name of the category
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_category_names.py
            EOF
  add-category-to-workflow:
    summary: |
      Add an existing category to an existing workflow
    options:
      - name: workflow-name
        summary: |
          Name of the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_workflow_names.py
            EOF
      - name: category-name
        summary: |
          The name of the category
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_category_names.py
            EOF

  #########################
  # Add maintainer commands
  #########################
  add-maintainer-to-expression:
    summary: |
      Add a maintainter to a cwl expression
    options:
      - name: expression-path
        summary: |
          Path to cwl expression
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_expression_paths.py
            EOF

      - name: username
        summary: |
          Name of maintainer
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF
  add-maintainer-to-tool:
    summary: |
      Add a maintainter to a cwl tool
    options:
      - name: tool-path
        summary: |
          Path to cwl tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_tool_paths.py
            EOF
      - name: username
        summary: |
          Name of maintainer
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF

  add-maintainer-to-workflow:
    summary: |
      Add a maintainter to a cwl workflow
    options:
      - name: workflow-path
        summary: |
          Path to cwl workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_workflow_paths.py
            EOF
      - name: username
        summary: |
          Name of project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF

  #############################
  # Run-register Commands
  #############################
  register-tool-run-instance:
    summary: |
      Register an ICA workflow run instance of a tool for a given project
    options:
      - name: ica-workflow-run-instance-id
        summary: |
          A workflow run instance id (starts with wfr.)
        type: string
      - name: project-name
        summary: |
          Name of project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: access-token
        summary: |
          ica access token, if run instance was executed in a linked project context
        type: string
  register-workflow-run-instance:
    summary: |
      Register an ICA workflow run instance of a workflow for a given project
    options:
      - name: ica-workflow-run-instance-id
        summary: |
          A workflow run instance id (starts with wfr.)
        type: string
      - name: project-name
        summary: |
          Name of project
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
      - name: access-token
        summary: |
          ica access token, if run instance was executed in a linked project context
        type: string

  #######################
  # Query workflow Commands
  #######################
  get-workflow-step-ids:
    summary: |
      Get the step ids of a CWL workflow
    options:
      - name: workflow-path
        summary: |
          A cwl workflow file
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_workflow_paths.py
            EOF

  ##################
  # Run-list Commands
  ##################
  list-tool-runs:
    summary: |
      List registered tool runs for a CWL tool in a given project
    options:
      - name: tool-path
        summary: |
          A cwl tool file
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_tool_paths.py
            EOF
      - name: project
        summary: |
          A project name
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF
  list-workflow-runs:
    summary: |
      List registered workflows runs for a CWL workflow in a given project
    options:
      - name: workflow-path
        summary: |
          A cwl workflow file
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_registered_workflows.py
            EOF
      - name: project
        summary: |
          A project name
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_project_names.py
            EOF

  ####################################
  # Create submission templates commands
  ####################################
  create-tool-submission-template:
    summary: |
      Create a ICA input template and bash script for a tool
    options:
      - name: tool-path
        summary: |
          Path to CWL tool
        type: string
        completion:
          command_string: |
            python - <<EOF
              __cwl-ica_list_all_tool_paths.py
            EOF
      - name: prefix
        summary: |
          Output prefix name
        type: string
      - name: project
        summary: |
          Project that tool belongs to
        type: string
        completion:
          command_string: |
            python - <<EOF
              __cwl-ica_list_project_names.py
            EOF
      - name: launch-project
        summary: |
          Name of the launch project
        type: string
      - name: ica-workflow-run-instance-id
        summary: |
          The workflow run instance id, starts with wfr.
        type: string
      - name: access-token
        summary: |
          The ica access token, ideally use env var ICA_ACCESS_TOKEN instead
        type: string
      - name: curl
        summary: |
          Use curl binary over ica binary to launch tool
      - name: ignore-workflow-id-mismatch
        summary: |
          Ignore workflow id mismatch, useful for when creating a template for a different context

  create-workflow-submission-template:
    summary: |
      Create a ICA input template and bash script for a workflow
    options:
      - name: workflow-path
        summary: |
          Path to CWL workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
              __cwl-ica_list_all_workflow_paths.py
            EOF
      - name: prefix
        summary: |
          Output prefix name
        type: string
      - name: project
        summary: |
          Project that workflow belongs to
        type: string
        completion:
          command_string: |
            python - <<EOF
              __cwl-ica_list_project_names.py
            EOF
      - name: launch-project
        summary: |
          Name of the launch project
        type: string
      - name: ica-workflow-run-instance-id
        summary: |
          The workflow run instance id, starts with wfr.
        type: string
      - name: access-token
        summary: |
          The ica access token, ideally use env var ICA_ACCESS_TOKEN instead
        type: string
      - name: curl
        summary: |
          Use curl binary over ica binary to launch workflow
      - name: ignore-workflow-id-mismatch
        summary: |
          Ignore workflow id mismatch, useful for when creating a template for a different context

  ################################
  # Get Run-templates Commands
  ################################
  copy-tool-submission-template:
    summary: |
      Copy a tool submission template for an upcoming tool run
    options:
      - name: ica-workflow-run-instance-id
        summary: |
          A ica workflow run instance id
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_run_instance_ids.py
            EOF
      - name: prefix
        summary: |
          The prefix to the outputs files and name attribute in the json file
        type: string
      - name: curl
        summary: |
          Use curl binary over ica binary to launch workflow
  copy-workflow-submission-template:
    summary: |
      Copy a workflow submission template for an upcoming workflow run
    options:
      - name: ica-workflow-run-instance-id
        summary: |
          A ica workflow run instance id
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_run_instance_ids.py
            EOF
      - name: prefix
        summary: |
          The prefix to the outputs files and name attribute in the json file
        type: string
      - name: curl
        summary: |
          Use curl binary over ica binary to launch workflow
          
  #######################
  # Creation Commands
  #######################
  create-typescript-expression-from-template:
    summary: |
      Initialise an typescript expression from the typescript expression template
    options:
      - name: typescript-expression-name
        summary: |
          The name of the typescript-expression
        type: string
      - name: typescript-expression-version
        summary: |
          Version of the typescript expression
        type: string
      - name: username
        summary: |
          CWL Creator
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_user_names.py
            EOF
  append-typescript-directory-to-cwl-expression-tool:
    summary: |
      Append a directory named 'typescript-expressions' to a CWL expression tool
    options:
      - name: expression-path
        summary: |
          The path to the cwl expression tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_expression_paths.py
            EOF
  append-typescript-directory-to-cwl-commandline-tool:
    summary: |
      Append a directory named 'typescript-expressions' to a CWL commandline tool
    options:
      - name: tool-path
        summary: |
          The path to the cwl commandline tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_tool_paths.py
            EOF
  append-typescript-directory-to-cwl-workflow:
    summary: |
      Append a directory named 'typescript-expressions' to a cwl workflow
    options:
      - name: workflow-path
        summary: |
          The path to the cwl workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_workflow_paths.py
            EOF
  create-typescript-interface-from-cwl-schema:
    summary: |
      Given a cwl schema create a typescript interface in the same directory
    options:
      - name: schema-path
        summary: |
          The name of the tool
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_schema_paths.py
            EOF
  typescript-expression-validate:
    summary: |
      Validate a typescript expression and generate a .cwljs file ready for importation
    options:
      - name: typescript-expression-dir
        summary: |
          The name of the workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_typescript_expression_paths.py
            EOF
  icav2-zip-workflow:
    summary: |
      Zip up a workflow ready to become a pipeline in ICAv2
    options:
      - name: workflow-path
        summary: |
          The path to the cwl workflow
        type: string
        completion:
          command_string: |
            python - <<EOF
            __cwl-ica_list_all_workflow_paths.py
            EOF
      - name: output-path
        summary: Optional, set the output path, otherwise just the working directory
        type: string
      - name: force
        summary: Optional, override existing zip file if one already exists
  icav2-deploy-pipeline:
    summary: |
      Deploy a zipped workflow to ICAv2
    options:
      - name: zipped-workflow-path
        summary: |
          Required, path to zipped up workflow
        type: string
      - name: project-id
        summary: |
          Optional, provide the project id (takes precedence over project-name)
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: project-name
        summary: |
          Optional, provide the project name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
      - name: analysis-storage-id
        summary: |
          Optional, takes precedence over analysis-storage-size
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/analysisStorages" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: analysis-storage-size
        summary: |
          Optional, default is set to Small
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/analysisStorages" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
  icav2-launch-pipeline-analysis:
    summary: |
      Launch a pipeline analysis in ICAv2
    options:
      - name: launch-json
        summary: |
          Required, launch json similar to v1
        type: string
        completion:
          command_string: |-
            find $PWD -name '*.json'
      - name: pipeline-id
        summary: |
          Optional, id of the pipeline you wish to launch
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/pipelines" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: pipeline-code
        summary: |
          Optional, code of the pipeline you wish to launch
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/pipelines" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .code'
            fi
      - name: project-id
        summary: |
          Optional, provide the project id, takes precedence over project-name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: project-name
        summary: |
          Optional, provide the project name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
      - name: output-parent-folder-id
        summary: |
          Optional, the id of the parent folder to write outputs to
        type: string
      - name: output-parent-folder-path
        summary: |
          Optional, the path to the parent folder to write outputs to (will be created if it doesn't exist)
        type: string
        completion:
          command_string: |-
              if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
                  project_index="-1";
                  project_name="";
                  project_id="";
                  if [[ "$(basename "${SHELL}")" == "bash" ]]; then
                      for i in "${!words[@]}"; do
                         if [[ "${words[$i]}" == "--project-name" ]]; then
                             project_index="$(expr $i + 1)";
                             project_name="${words[$project_index]}";
                         elif [[ "${words[$i]}" == "--project-id" ]]; then
                             project_index="$(expr $i + 1)";
                             project_id="${words[$project_index]}";
                         fi;
                      done;
                  elif [[ "$(basename "${SHELL}")" == "zsh" ]]; then
                      for ((i = 1; i <= $#words; i++)); do
                         if [[ "${words[$i]}" == "--project-name" ]]; then
                             project_index="$(expr $i + 1)";
                             project_name="${words[$project_index]}";
                         elif [[ "${words[$i]}" == "--project-id" ]]; then
                             project_index="$(expr $i + 1)";
                             project_id="${words[$project_index]}";
                         fi;
                      done;
                  fi;
                if [[ -n "${project_name}" || -n "${project_id}" ]]; then
                  if [[ -z "${project_id}" ]]; then 
                    project_id="$(curl --silent --fail --location \
                                    --request "GET" \
                                    --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                                    --header "Accept: application/vnd.illumina.v3+json" \
                                    --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
                                  jq --raw-output \
                                    --arg "project_name" "${project_name}" \
                                    '.items[] | select(.name==$project_name) | .id')";
                  fi;
                  if [[ "${CURRENT_WORD}" == */ ]]; then
                    parent_folder="${CURRENT_WORD}";
                  else
                    parent_folder="$(dirname "${CURRENT_WORD}")";
                  fi;
                  curl --silent --fail --location \
                    --request "GET" \
                    --header "Accept: application/vnd.illumina.v3+json" \
                    --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" \
                    --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects/${project_id}/data?parentFolderPath=${parent_folder%/}/&filenameMatchMode=EXACT&type=FOLDER" | 
                  jq --raw-output \
                    '.items[] | .data.details.path';
                fi
              fi
      - name: analysis-storage-id
        summary: |
          Optional, takes precedence over analysis-storage-size
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/analysisStorages" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: analysis-storage-size
        summary: |
          Optional, default is set to Small
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/analysisStorages" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
      - name: activation-id
        summary: |
          Optional, the activation id used by the pipeline analysis
        type: string
  icav2-list-analysis-steps:
    summary: |
      List steps of an analysis
    options:
      - name: project-id
        summary: |
          Optional, provide the project id, takes precedence over project-name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: project-name
        summary: |
          Optional, provide the project name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
      - name: analysis-id
        summary: |
          Required, the analysis id you wish to list logs of
        type: string
      - name: show-technical-steps
        summary: |
          Also list technical steps
  icav2-get-analysis-step-logs:
    summary: |
      Launch a pipeline analysis in ICAv2
    options:
      - name: project-id
        summary: |
          Optional, provide the project id, takes precedence over project-name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .id'
            fi
      - name: project-name
        summary: |
          Optional, provide the project name
        type: string
        completion:
          command_string: |-
            if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              curl --silent --fail --location --request "GET" \
                   --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                   --header 'Accept: application/vnd.illumina.v3+json' \
                   --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
              jq --raw-output '.items[] | .name'
            fi
      - name: analysis-id
        summary: |
          Required, the analysis id you wish to list logs of
        type: string
      - name: step-name
        summary: |
          The name of the step
        type: string
      - name: stdout
        summary: |
          Get the stdout of a step
      - name: stderr
        summary: |
          Get the stderr of a step
      - name: output-path
        summary: |
          Write output to file
        type: string
